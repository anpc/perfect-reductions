︠d7d05283-2842-485a-9a03-7f0ef91252c0︠
%md
# This project explores the construction of 2-out-of-3-OT from 1-of-2-OT

Here we make $T$ parallel calls to the OT oracles.

We start with $T = 3$

## Problem representation:

$C_1,C_2,C_3$ are the client's valid inputs.

From client's correctness, each 6-tuple of bits is assigned to some $(x1,x2,x3)$ triple.

The assignments should create an independent set in a graph with $2^{2T+3}$ veritces.

There is an edge between $v_g$ and ${v'}_{g'}$ iff. $g$ and $g'$ differ of a pair $(i,j)=[3]\setminus \{k\}$ of bits, but $v[c_k] \ne v'[c_k]$.
︡4dfc1cbd-2917-4c36-8301-9f53e8f37c45︡{"done":true,"md":"# This project explores the construction of 2-out-of-3-OT from 1-of-2-OT\n\nHere we make $T$ parallel calls to the OT oracles.\n\nWe start with $T = 3$\n\n## Problem representation:\n\n$C_1,C_2,C_3$ are the client's valid inputs.\n\nFrom client's correctness, each 6-tuple of bits is assigned to some $(x1,x2,x3)$ triple.\n\nThe assignments should create an independent set in a graph with $2^{2T+3}$ veritces.\n\nThere is an edge between $v_g$ and ${v'}_{g'}$ iff. $g$ and $g'$ differ of a pair $(i,j)=[3]\\setminus \\{k\\}$ of bits, but $v[c_k] \\ne v'[c_k]$."}
︠71951939-ef54-4de0-b65f-e2a9a1bfda7fr︠

import itertools
import pprint

# TODO: change hardcoded 3 into T everywhere in the code

def change_one(pair, index, new_value):
    """Return new tuple with one element modified."""
    new_pair = list(pair)
    new_pair[index] = new_value
    return tuple(new_pair)

def product(*args, **kwargs):
    return list(itertools.product(*args, **kwargs))

# v_arr has the right value at c projection fixed
def add_constraints1(lv, client_index, v_ind1, v_ind2, v_arr):
     L = []
     weights = {}
     v_ind_list = [v_ind1, v_ind2]
     w = [1, -1] 
     for i in range(2):
         v_ind = v_ind_list[i]
         weight = w[i]   
         for rest in itertools.product(range(2), repeat = 3)
             v_arr_new = [change_one(pair, c^1, r)
                                        for (pair, c, r) in zip(v_arr, client_index, rest)]
             L.append(str(v_ind, v_arr_new))
             weights[str(v_ind, v_arr_new)] = weight
     lv.add_constraint(sum(weights[o] * L[o] for o in L) <= 0)
     lv.add_constraint(sum(-weights[o] * L[o] for o in L) <= 0)
     # is this necessary or does lv actually pass by reference ?
        
def add_constraints2(lv, v_ind):
    L = []
    for j in product(list(product(range(2), repeat = 2)), repeat = 3):
        L.append(str(v_ind, v_arr))    
    lv.add_constraint(sum(L[o] for o in L) <= 1)
    lv.add_constraint(sum(-L[o] for o in L) <= -1)
    
    
# each of the list elements is a non-empty list of triples
def generate_LP(client_index_list):
    p = MixedIntegerLinearProgram()
    p.set_objective(5)   
    lv = p.new_variable()
    lv.set_min(0)
    lv.set_max(1)
    
    
    for (x,y) in itertools.product(range(2), repeat = 2):
        for i in range(3):
            for v_arr_c in itertools.product(range(2), repeat = 3):
                client_index = client_index_list[i]
                v_arr = [change_one((0, 0), c, r) for (c, r) in zip(client_index, v_arr_c)]
                add_constraints1(lv, (0,x,y), (1,x,y), v_arr)


vectors = list(itertools.product(range(2), repeat = 3))
print 'vectors = ', vectors
spread_indices = list(itertools.product(range(3), repeat = 5))
for i in spread_indices:
    1-flag = (1 in i)
    2-flag = (1 in i)
    endings = []
    if 1-flag and 2-flag:
        endings = list(itertools.product(range(3), repeat = 2))
    else if 1-flag and !2-flag:
        endings = [(2,0),(2,1),(2,2),(0,2),(1,2)]
    else if 2-flag and !1-flag:
        endings = [(1,0),(1,1),(1,2),(0,1),(2,1)]
    else:
        endings = [(1,2),(2,1)]
    for j in endings:
        c_distr = i + j
        c_lists = [[(0,0,0)],[],[]]
        for (i,d) in enumerate(c_distr):
            c[d].append(vectors[i+1])
     
    
    
    # go over all triples
    for i in range(3):
        for (x,y) in range(2):
            for c in c_lists[i]:
                


client_index_triples = [(c1, c2, c3)
                        for c2 in indices
                        for c3 in indices
                        if len({c1, c2, c3}) == 3]

arrays = list(itertools.product(itertools.product(range(2), repeat = 2), repeat = 3))





for client_index_triple in client_index_triples:
    #print 'client_index_triple =', client_index_triple
    d = {}
    # graph vertices have the form (index, array).
    for (v_ind, v_arr) in itertools.product(indices, arrays):
        print 'checking v_ind =', v_ind, 'v_arr =', v_arr
        edges_v = []
        for ind in indices:
            for i in range(3):
                flag = false
                for j in range(3):
                    if (j != i) and ind[j] != v_ind[j]:
                        flag = true
                if flag:
                   client_index = client_index_triple[i]
                   for rest in itertools.product(range(2), repeat = 3):
                       v_arr_new = [change_one(pair, c^1, r)
                                    for (pair, c, r) in zip(v_arr, client_index, rest)]
                       edges_v.append(str((ind, v_arr_new)))
        d[str((v_ind, v_arr))] = edges_v
        #break
        
    print 'graph has ', len(d), ' vertices and ', sum(len(edges) for edges in d.values()), ' edges'
    #pprint.pprint(d, width=120)
    G = Graph(d, format='dict_of_lists', vertex_labels=True)
    #print 'G =',G
    P = G.plot()
    P.show()
    break
︡5a5028de-ed40-4800-a683-5d43ffc5bad1︡{"stdout":"client_index_triple = ((0, 0, 0), (0, 0, 1), (0, 1, 0))\nchecking v_ind = (0, 0, 0) v_arr = ((0, 0), (0, 0), (0, 0))\nchecking v_ind = (0, 0, 0) v_arr = ((0, 0), (0, 0), (0, 1))\nchecking v_ind = (0, 0, 0) v_arr = ((0, 0), (0, 0), (1, 0))\nchecking v_ind = (0, 0, 0) v_arr = ((0, 0), (0, 0), (1, 1))\nchecking v_ind = (0, 0, 0) v_arr = ((0, 0), (0, 1), (0, 0))\nchecking v_ind = (0, 0, 0) v_arr = ((0, 0), (0, 1), (0, 1))\nchecking v_ind = (0, 0, 0) v_arr = ((0, 0), (0, 1), (1, 0))\nchecking v_ind = (0, 0, 0) v_arr = ((0, 0), (0, 1), (1, 1))\nchecking v_ind = (0, 0, 0) v_arr = ((0, 0), (1, 0), (0, 0))\nchecking v_ind = (0, 0, 0) v_arr = ((0, 0), (1, 0), (0, 1))\nchecking v_ind = (0, 0, 0) v_arr = ((0, 0), (1, 0), (1, 0))\nchecking v_ind = (0, 0, 0) v_arr = ((0, 0), (1, 0), (1, 1))\nchecking v_ind = (0, 0, 0) v_arr = ((0, 0), (1, 1), (0, 0))\nchecking v_ind = (0, 0, 0) v_arr = ((0, 0), (1, 1), (0, 1))\nchecking v_ind = (0, 0, 0) v_arr = ((0, 0), (1, 1), (1, 0))\nchecking v_ind = (0, 0, 0) v_arr = ((0, 0), (1, 1), (1, 1))\nchecking v_ind = (0, 0, 0) v_arr = ((0, 1), (0, 0), (0, 0))\nchecking v_ind = (0, 0, 0) v_arr = ((0, 1), (0, 0), (0, 1))\nchecking v_ind = (0, 0, 0) v_arr = ((0, 1), (0, 0), (1, 0))\nchecking v_ind = (0, 0, 0) v_arr = ((0, 1), (0, 0), (1, 1))\nchecking v_ind = (0, 0, 0) v_arr = ((0, 1), (0, 1), (0, 0))\nchecking v_ind = (0, 0, 0) v_arr = ((0, 1), (0, 1), (0, 1))\nchecking v_ind = (0, 0, 0) v_arr = ((0, 1), (0, 1), (1, 0))\nchecking v_ind = (0, 0, 0) v_arr = ((0, 1), (0, 1), (1, 1))\nchecking v_ind = (0, 0, 0) v_arr = ((0, 1), (1, 0), (0, 0))\nchecking v_ind = (0, 0, 0) v_arr = ((0, 1), (1, 0), (0, 1))\nchecking v_ind = (0, 0, 0) v_arr = ((0, 1), (1, 0), (1, 0))\nchecking v_ind = (0, 0, 0) v_arr = ((0, 1), (1, 0), (1, 1))\nchecking v_ind = (0, 0, 0) v_arr = ((0, 1), (1, 1), (0, 0))\nchecking v_ind = (0, 0, 0) v_arr = ((0, 1), (1, 1), (0, 1))\nchecking v_ind = (0, 0, 0) v_arr = ((0, 1), (1, 1), (1, 0))\nchecking v_ind = (0, 0, 0) v_arr = ((0, 1), (1, 1), (1, 1))\nchecking v_ind = (0, 0, 0) v_arr = ((1, 0), (0, 0), (0, 0))\nchecking v_ind = (0, 0, 0) v_arr = ((1, 0), (0, 0), (0, 1))\nchecking v_ind ="}︡{"stdout":" (0, 0, 0) v_arr = ((1, 0), (0, 0), (1, 0))\nchecking v_ind = (0, 0, 0) v_arr = ((1, 0), (0, 0), (1, 1))\nchecking v_ind = (0, 0, 0) v_arr = ((1, 0), (0, 1), (0, 0))\nchecking v_ind = (0, 0, 0) v_arr = ((1, 0), (0, 1), (0, 1))\nchecking v_ind = (0, 0, 0) v_arr = ((1, 0), (0, 1), (1, 0))\nchecking v_ind = (0, 0, 0) v_arr = ((1, 0), (0, 1), (1, 1))\nchecking v_ind = (0, 0, 0) v_arr = ((1, 0), (1, 0), (0, 0))\nchecking v_ind = (0, 0, 0) v_arr = ((1, 0), (1, 0), (0, 1))\nchecking v_ind = (0, 0, 0) v_arr = ((1, 0), (1, 0), (1, 0))\nchecking v_ind = (0, 0, 0) v_arr = ((1, 0), (1, 0), (1, 1))\nchecking v_ind = (0, 0, 0) v_arr = ((1, 0), (1, 1), (0, 0))\nchecking v_ind = (0, 0, 0) v_arr = ((1, 0), (1, 1), (0, 1))\nchecking v_ind = (0, 0, 0) v_arr = ((1, 0), (1, 1), (1, 0))\nchecking v_ind = (0, 0, 0) v_arr = ((1, 0), (1, 1), (1, 1))\nchecking v_ind = (0, 0, 0) v_arr = ((1, 1), (0, 0), (0, 0))\nchecking v_ind = (0, 0, 0) v_arr = ((1, 1), (0, 0), (0, 1))\nchecking v_ind = (0, 0, 0) v_arr = ((1, 1), (0, 0), (1, 0))\nchecking v_ind = (0, 0, 0) v_arr = ((1, 1), (0, 0), (1, 1))\nchecking v_ind = (0, 0, 0) v_arr = ((1, 1), (0, 1), (0, 0))\nchecking v_ind = (0, 0, 0) v_arr = ((1, 1), (0, 1), (0, 1))\nchecking v_ind = (0, 0, 0) v_arr = ((1, 1), (0, 1), (1, 0))\nchecking v_ind = (0, 0, 0) v_arr = ((1, 1), (0, 1), (1, 1))\nchecking v_ind = (0, 0, 0) v_arr = ((1, 1), (1, 0), (0, 0))\nchecking v_ind = (0, 0, 0) v_arr = ((1, 1), (1, 0), (0, 1))\nchecking v_ind = (0, 0, 0) v_arr = ((1, 1), (1, 0), (1, 0))\nchecking v_ind = (0, 0, 0) v_arr = ((1, 1), (1, 0), (1, 1))\nchecking v_ind = (0, 0, 0) v_arr = ((1, 1), (1, 1), (0, 0))\nchecking v_ind = (0, 0, 0) v_arr = ((1, 1), (1, 1), (0, 1))\nchecking v_ind = (0, 0, 0) v_arr = ((1, 1), (1, 1), (1, 0))\nchecking v_ind = (0, 0, 0) v_arr = ((1, 1), (1, 1), (1, 1))\nchecking v_ind = (0, 0, 1) v_arr = ((0, 0), (0, 0), (0, 0))\nchecking v_ind = (0, 0, 1) v_arr = ((0, 0), (0, 0), (0, 1))\nchecking v_ind = (0, 0, 1) v_arr = ((0, 0), (0, 0), (1, 0))\nchecking v_ind ="}︡{"stdout":" (0, 0, 1) v_arr = ((0, 0), (0, 0), (1, 1))\nchecking v_ind = (0, 0, 1) v_arr = ((0, 0), (0, 1), (0, 0))\nchecking v_ind = (0, 0, 1) v_arr = ((0, 0), (0, 1), (0, 1))\nchecking v_ind = (0, 0, 1) v_arr = ((0, 0), (0, 1), (1, 0))\nchecking v_ind = (0, 0, 1) v_arr = ((0, 0), (0, 1), (1, 1))\nchecking v_ind = (0, 0, 1) v_arr = ((0, 0), (1, 0), (0, 0))\nchecking v_ind = (0, 0, 1) v_arr = ((0, 0), (1, 0), (0, 1))\nchecking v_ind = (0, 0, 1) v_arr = ((0, 0), (1, 0), (1, 0))\nchecking v_ind = (0, 0, 1) v_arr = ((0, 0), (1, 0), (1, 1))\nchecking v_ind = (0, 0, 1) v_arr = ((0, 0), (1, 1), (0, 0))\nchecking v_ind = (0, 0, 1) v_arr = ((0, 0), (1, 1), (0, 1))\nchecking v_ind = (0, 0, 1) v_arr = ((0, 0), (1, 1), (1, 0))\nchecking v_ind = (0, 0, 1) v_arr = ((0, 0), (1, 1), (1, 1))\nchecking v_ind = (0, 0, 1) v_arr = ((0, 1), (0, 0), (0, 0))\nchecking v_ind = (0, 0, 1) v_arr = ((0, 1), (0, 0), (0, 1))\nchecking v_ind = (0, 0, 1) v_arr = ((0, 1), (0, 0), (1, 0))\nchecking v_ind = (0, 0, 1) v_arr = ((0, 1), (0, 0), (1, 1))\nchecking v_ind = (0, 0, 1) v_arr = ((0, 1), (0, 1), (0, 0))\nchecking v_ind = (0, 0, 1) v_arr = ((0, 1), (0, 1), (0, 1))\nchecking v_ind = (0, 0, 1) v_arr = ((0, 1), (0, 1), (1, 0))\nchecking v_ind = (0, 0, 1) v_arr = ((0, 1), (0, 1), (1, 1))\nchecking v_ind = (0, 0, 1) v_arr = ((0, 1), (1, 0), (0, 0))\nchecking v_ind = (0, 0, 1) v_arr = ((0, 1), (1, 0), (0, 1))\nchecking v_ind = (0, 0, 1) v_arr = ((0, 1), (1, 0), (1, 0))\nchecking v_ind = (0, 0, 1) v_arr = ((0, 1), (1, 0), (1, 1))\nchecking v_ind = (0, 0, 1) v_arr = ((0, 1), (1, 1), (0, 0))\nchecking v_ind = (0, 0, 1) v_arr = ((0, 1), (1, 1), (0, 1))\nchecking v_ind = (0, 0, 1) v_arr = ((0, 1), (1, 1), (1, 0))\nchecking v_ind = (0, 0, 1) v_arr = ((0, 1), (1, 1), (1, 1))\nchecking v_ind = (0, 0, 1) v_arr = ((1, 0), (0, 0), (0, 0))\nchecking v_ind = (0, 0, 1) v_arr = ((1, 0), (0, 0), (0, 1))\nchecking v_ind = (0, 0, 1) v_arr = ((1, 0), (0, 0), (1, 0))\nchecking v_ind = (0, 0, 1) v_arr = ((1, 0), (0, 0), (1, 1))\nchecking v_ind = (0, 0, 1) v_arr = ((1, 0), (0, 1), (0, 0))\nchecking v_ind = (0, 0, 1) v_arr = ((1, 0), (0, 1), (0, 1))\nchecking v_ind ="}︡{"stdout":" (0, 0, 1) v_arr = ((1, 0), (0, 1), (1, 0))\nchecking v_ind = (0, 0, 1) v_arr = ((1, 0), (0, 1), (1, 1))\nchecking v_ind = (0, 0, 1) v_arr = ((1, 0), (1, 0), (0, 0))\nchecking v_ind = (0, 0, 1) v_arr = ((1, 0), (1, 0), (0, 1))\nchecking v_ind = (0, 0, 1) v_arr = ((1, 0), (1, 0), (1, 0))\nchecking v_ind = (0, 0, 1) v_arr = ((1, 0), (1, 0), (1, 1))\nchecking v_ind = (0, 0, 1) v_arr = ((1, 0), (1, 1), (0, 0))\nchecking v_ind = (0, 0, 1) v_arr = ((1, 0), (1, 1), (0, 1))\nchecking v_ind = (0, 0, 1) v_arr = ((1, 0), (1, 1), (1, 0))\nchecking v_ind = (0, 0, 1) v_arr = ((1, 0), (1, 1), (1, 1))\nchecking v_ind = (0, 0, 1) v_arr = ((1, 1), (0, 0), (0, 0))\nchecking v_ind = (0, 0, 1) v_arr = ((1, 1), (0, 0), (0, 1))\nchecking v_ind = (0, 0, 1) v_arr = ((1, 1), (0, 0), (1, 0))\nchecking v_ind = (0, 0, 1) v_arr = ((1, 1), (0, 0), (1, 1))\nchecking v_ind = (0, 0, 1) v_arr = ((1, 1), (0, 1), (0, 0))\nchecking v_ind = (0, 0, 1) v_arr = ((1, 1), (0, 1), (0, 1))\nchecking v_ind = (0, 0, 1) v_arr = ((1, 1), (0, 1), (1, 0))\nchecking v_ind = (0, 0, 1) v_arr = ((1, 1), (0, 1), (1, 1))\nchecking v_ind = (0, 0, 1) v_arr = ((1, 1), (1, 0), (0, 0))\nchecking v_ind = (0, 0, 1) v_arr = ((1, 1), (1, 0), (0, 1))\nchecking v_ind = (0, 0, 1) v_arr = ((1, 1), (1, 0), (1, 0))\nchecking v_ind = (0, 0, 1) v_arr = ((1, 1), (1, 0), (1, 1))\nchecking v_ind = (0, 0, 1) v_arr = ((1, 1), (1, 1), (0, 0))\nchecking v_ind = (0, 0, 1) v_arr = ((1, 1), (1, 1), (0, 1))\nchecking v_ind = (0, 0, 1) v_arr = ((1, 1), (1, 1), (1, 0))\nchecking v_ind = (0, 0, 1) v_arr = ((1, 1), (1, 1), (1, 1))\nchecking v_ind = (0, 1, 0) v_arr = ((0, 0), (0, 0), (0, 0))\nchecking v_ind = (0, 1, 0) v_arr = ((0, 0), (0, 0), (0, 1))\nchecking v_ind = (0, 1, 0) v_arr = ((0, 0), (0, 0), (1, 0))\nchecking v_ind = (0, 1, 0) v_arr = ((0, 0), (0, 0), (1, 1))\nchecking v_ind = (0, 1, 0) v_arr = ((0, 0), (0, 1), (0, 0))\nchecking v_ind = (0, 1, 0) v_arr = ((0, 0), (0, 1), (0, 1))\nchecking v_ind = (0, 1, 0) v_arr = ((0, 0), (0, 1), (1, 0))\nchecking v_ind = (0, 1, 0) v_arr = ((0, 0), (0, 1), (1, 1))\nchecking v_ind ="}︡{"stdout":" (0, 1, 0) v_arr = ((0, 0), (1, 0), (0, 0))\nchecking v_ind = (0, 1, 0) v_arr = ((0, 0), (1, 0), (0, 1))\nchecking v_ind = (0, 1, 0) v_arr = ((0, 0), (1, 0), (1, 0))\nchecking v_ind = (0, 1, 0) v_arr = ((0, 0), (1, 0), (1, 1))\nchecking v_ind = (0, 1, 0) v_arr = ((0, 0), (1, 1), (0, 0))\nchecking v_ind = (0, 1, 0) v_arr = ((0, 0), (1, 1), (0, 1))\nchecking v_ind = (0, 1, 0) v_arr = ((0, 0), (1, 1), (1, 0))\nchecking v_ind = (0, 1, 0) v_arr = ((0, 0), (1, 1), (1, 1))\nchecking v_ind = (0, 1, 0) v_arr = ((0, 1), (0, 0), (0, 0))\nchecking v_ind = (0, 1, 0) v_arr = ((0, 1), (0, 0), (0, 1))\nchecking v_ind = (0, 1, 0) v_arr = ((0, 1), (0, 0), (1, 0))\nchecking v_ind = (0, 1, 0) v_arr = ((0, 1), (0, 0), (1, 1))\nchecking v_ind = (0, 1, 0) v_arr = ((0, 1), (0, 1), (0, 0))\nchecking v_ind = (0, 1, 0) v_arr = ((0, 1), (0, 1), (0, 1))\nchecking v_ind = (0, 1, 0) v_arr = ((0, 1), (0, 1), (1, 0))\nchecking v_ind = (0, 1, 0) v_arr = ((0, 1), (0, 1), (1, 1))\nchecking v_ind = (0, 1, 0) v_arr = ((0, 1), (1, 0), (0, 0))\nchecking v_ind = (0, 1, 0) v_arr = ((0, 1), (1, 0), (0, 1))\nchecking v_ind = (0, 1, 0) v_arr = ((0, 1), (1, 0), (1, 0))\nchecking v_ind = (0, 1, 0) v_arr = ((0, 1), (1, 0), (1, 1))\nchecking v_ind = (0, 1, 0) v_arr = ((0, 1), (1, 1), (0, 0))\nchecking v_ind = (0, 1, 0) v_arr = ((0, 1), (1, 1), (0, 1))\nchecking v_ind = (0, 1, 0) v_arr = ((0, 1), (1, 1), (1, 0))\nchecking v_ind = (0, 1, 0) v_arr = ((0, 1), (1, 1), (1, 1))\nchecking v_ind = (0, 1, 0) v_arr = ((1, 0), (0, 0), (0, 0))\nchecking v_ind = (0, 1, 0) v_arr = ((1, 0), (0, 0), (0, 1))\nchecking v_ind = (0, 1, 0) v_arr = ((1, 0), (0, 0), (1, 0))\nchecking v_ind = (0, 1, 0) v_arr = ((1, 0), (0, 0), (1, 1))\nchecking v_ind = (0, 1, 0) v_arr = ((1, 0), (0, 1), (0, 0))\nchecking v_ind = (0, 1, 0) v_arr = ((1, 0), (0, 1), (0, 1))\nchecking v_ind = (0, 1, 0) v_arr = ((1, 0), (0, 1), (1, 0))\nchecking v_ind = (0, 1, 0) v_arr = ((1, 0), (0, 1), (1, 1))\nchecking v_ind = (0, 1, 0) v_arr = ((1, 0), (1, 0), (0, 0))\nchecking v_ind = (0, 1, 0) v_arr = ((1, 0), (1, 0), (0, 1))\nchecking v_ind ="}︡{"stdout":" (0, 1, 0) v_arr = ((1, 0), (1, 0), (1, 0))\nchecking v_ind = (0, 1, 0) v_arr = ((1, 0), (1, 0), (1, 1))\nchecking v_ind = (0, 1, 0) v_arr = ((1, 0), (1, 1), (0, 0))\nchecking v_ind = (0, 1, 0) v_arr = ((1, 0), (1, 1), (0, 1))\nchecking v_ind = (0, 1, 0) v_arr = ((1, 0), (1, 1), (1, 0))\nchecking v_ind = (0, 1, 0) v_arr = ((1, 0), (1, 1), (1, 1))\nchecking v_ind = (0, 1, 0) v_arr = ((1, 1), (0, 0), (0, 0))\nchecking v_ind = (0, 1, 0) v_arr = ((1, 1), (0, 0), (0, 1))\nchecking v_ind = (0, 1, 0) v_arr = ((1, 1), (0, 0), (1, 0))\nchecking v_ind = (0, 1, 0) v_arr = ((1, 1), (0, 0), (1, 1))\nchecking v_ind = (0, 1, 0) v_arr = ((1, 1), (0, 1), (0, 0))\nchecking v_ind = (0, 1, 0) v_arr = ((1, 1), (0, 1), (0, 1))\nchecking v_ind = (0, 1, 0) v_arr = ((1, 1), (0, 1), (1, 0))\nchecking v_ind = (0, 1, 0) v_arr = ((1, 1), (0, 1), (1, 1))\nchecking v_ind = (0, 1, 0) v_arr = ((1, 1), (1, 0), (0, 0))\nchecking v_ind = (0, 1, 0) v_arr = ((1, 1), (1, 0), (0, 1))\nchecking v_ind = (0, 1, 0) v_arr = ((1, 1), (1, 0), (1, 0))\nchecking v_ind = (0, 1, 0) v_arr = ((1, 1), (1, 0), (1, 1))\nchecking v_ind = (0, 1, 0) v_arr = ((1, 1), (1, 1), (0, 0))\nchecking v_ind = (0, 1, 0) v_arr = ((1, 1), (1, 1), (0, 1))\nchecking v_ind = (0, 1, 0) v_arr = ((1, 1), (1, 1), (1, 0))\nchecking v_ind = (0, 1, 0) v_arr = ((1, 1), (1, 1), (1, 1))\nchecking v_ind = (0, 1, 1) v_arr = ((0, 0), (0, 0), (0, 0))\nchecking v_ind = (0, 1, 1) v_arr = ((0, 0), (0, 0), (0, 1))\nchecking v_ind = (0, 1, 1) v_arr = ((0, 0), (0, 0), (1, 0))\nchecking v_ind = (0, 1, 1) v_arr = ((0, 0), (0, 0), (1, 1))\nchecking v_ind = (0, 1, 1) v_arr = ((0, 0), (0, 1), (0, 0))\nchecking v_ind = (0, 1, 1) v_arr = ((0, 0), (0, 1), (0, 1))\nchecking v_ind = (0, 1, 1) v_arr = ((0, 0), (0, 1), (1, 0))\nchecking v_ind = (0, 1, 1) v_arr = ((0, 0), (0, 1), (1, 1))\nchecking v_ind = (0, 1, 1) v_arr = ((0, 0), (1, 0), (0, 0))\nchecking v_ind = (0, 1, 1) v_arr = ((0, 0), (1, 0), (0, 1))\nchecking v_ind = (0, 1, 1) v_arr = ((0, 0), (1, 0), (1, 0))\nchecking v_ind ="}︡{"stdout":" (0, 1, 1) v_arr = ((0, 0), (1, 0), (1, 1))\nchecking v_ind = (0, 1, 1) v_arr = ((0, 0), (1, 1), (0, 0))\nchecking v_ind = (0, 1, 1) v_arr = ((0, 0), (1, 1), (0, 1))\nchecking v_ind = (0, 1, 1) v_arr = ((0, 0), (1, 1), (1, 0))\nchecking v_ind = (0, 1, 1) v_arr = ((0, 0), (1, 1), (1, 1))\nchecking v_ind = (0, 1, 1) v_arr = ((0, 1), (0, 0), (0, 0))\nchecking v_ind = (0, 1, 1) v_arr = ((0, 1), (0, 0), (0, 1))\nchecking v_ind = (0, 1, 1) v_arr = ((0, 1), (0, 0), (1, 0))\nchecking v_ind = (0, 1, 1) v_arr = ((0, 1), (0, 0), (1, 1))\nchecking v_ind = (0, 1, 1) v_arr = ((0, 1), (0, 1), (0, 0))\nchecking v_ind = (0, 1, 1) v_arr = ((0, 1), (0, 1), (0, 1))\nchecking v_ind = (0, 1, 1) v_arr = ((0, 1), (0, 1), (1, 0))\nchecking v_ind = (0, 1, 1) v_arr = ((0, 1), (0, 1), (1, 1))\nchecking v_ind = (0, 1, 1) v_arr = ((0, 1), (1, 0), (0, 0))\nchecking v_ind = (0, 1, 1) v_arr = ((0, 1), (1, 0), (0, 1))\nchecking v_ind = (0, 1, 1) v_arr = ((0, 1), (1, 0), (1, 0))\nchecking v_ind = (0, 1, 1) v_arr = ((0, 1), (1, 0), (1, 1))\nchecking v_ind = (0, 1, 1) v_arr = ((0, 1), (1, 1), (0, 0))\nchecking v_ind = (0, 1, 1) v_arr = ((0, 1), (1, 1), (0, 1))\nchecking v_ind = (0, 1, 1) v_arr = ((0, 1), (1, 1), (1, 0))\nchecking v_ind = (0, 1, 1) v_arr = ((0, 1), (1, 1), (1, 1))\nchecking v_ind = (0, 1, 1) v_arr = ((1, 0), (0, 0), (0, 0))\nchecking v_ind = (0, 1, 1) v_arr = ((1, 0), (0, 0), (0, 1))\nchecking v_ind = (0, 1, 1) v_arr = ((1, 0), (0, 0), (1, 0))\nchecking v_ind = (0, 1, 1) v_arr = ((1, 0), (0, 0), (1, 1))\nchecking v_ind = (0, 1, 1) v_arr = ((1, 0), (0, 1), (0, 0))\nchecking v_ind = (0, 1, 1) v_arr = ((1, 0), (0, 1), (0, 1))\nchecking v_ind = (0, 1, 1) v_arr = ((1, 0), (0, 1), (1, 0))\nchecking v_ind = (0, 1, 1) v_arr = ((1, 0), (0, 1), (1, 1))\nchecking v_ind = (0, 1, 1) v_arr = ((1, 0), (1, 0), (0, 0))\nchecking v_ind = (0, 1, 1) v_arr = ((1, 0), (1, 0), (0, 1))\nchecking v_ind = (0, 1, 1) v_arr = ((1, 0), (1, 0), (1, 0))\nchecking v_ind ="}︡{"stdout":" (0, 1, 1) v_arr = ((1, 0), (1, 0), (1, 1))\nchecking v_ind = (0, 1, 1) v_arr = ((1, 0), (1, 1), (0, 0))\nchecking v_ind = (0, 1, 1) v_arr = ((1, 0), (1, 1), (0, 1))\nchecking v_ind = (0, 1, 1) v_arr = ((1, 0), (1, 1), (1, 0))\nchecking v_ind = (0, 1, 1) v_arr = ((1, 0), (1, 1), (1, 1))\nchecking v_ind = (0, 1, 1) v_arr = ((1, 1), (0, 0), (0, 0))\nchecking v_ind = (0, 1, 1) v_arr = ((1, 1), (0, 0), (0, 1))\nchecking v_ind = (0, 1, 1) v_arr = ((1, 1), (0, 0), (1, 0))\nchecking v_ind = (0, 1, 1) v_arr = ((1, 1), (0, 0), (1, 1))\nchecking v_ind = (0, 1, 1) v_arr = ((1, 1), (0, 1), (0, 0))\nchecking v_ind = (0, 1, 1) v_arr = ((1, 1), (0, 1), (0, 1))\nchecking v_ind = (0, 1, 1) v_arr = ((1, 1), (0, 1), (1, 0))\nchecking v_ind = (0, 1, 1) v_arr = ((1, 1), (0, 1), (1, 1))\nchecking v_ind = (0, 1, 1) v_arr = ((1, 1), (1, 0), (0, 0))\nchecking v_ind = (0, 1, 1) v_arr = ((1, 1), (1, 0), (0, 1))\nchecking v_ind = (0, 1, 1) v_arr = ((1, 1), (1, 0), (1, 0))\nchecking v_ind = (0, 1, 1) v_arr = ((1, 1), (1, 0), (1, 1))\nchecking v_ind = (0, 1, 1) v_arr = ((1, 1), (1, 1), (0, 0))\nchecking v_ind = (0, 1, 1) v_arr = ((1, 1), (1, 1), (0, 1))\nchecking v_ind = (0, 1, 1) v_arr = ((1, 1), (1, 1), (1, 0))\nchecking v_ind = (0, 1, 1) v_arr = ((1, 1), (1, 1), (1, 1))\nchecking v_ind = (1, 0, 0) v_arr = ((0, 0), (0, 0), (0, 0))\nchecking v_ind = (1, 0, 0) v_arr = ((0, 0), (0, 0), (0, 1))\nchecking v_ind = (1, 0, 0) v_arr = ((0, 0), (0, 0), (1, 0))\nchecking v_ind = (1, 0, 0) v_arr = ((0, 0), (0, 0), (1, 1))\nchecking v_ind = (1, 0, 0) v_arr = ((0, 0), (0, 1), (0, 0))\nchecking v_ind = (1, 0, 0) v_arr = ((0, 0), (0, 1), (0, 1))\nchecking v_ind = (1, 0, 0) v_arr = ((0, 0), (0, 1), (1, 0))\nchecking v_ind = (1, 0, 0) v_arr = ((0, 0), (0, 1), (1, 1))\nchecking v_ind = (1, 0, 0) v_arr = ((0, 0), (1, 0), (0, 0))\nchecking v_ind = (1, 0, 0) v_arr = ((0, 0), (1, 0), (0, 1))\nchecking v_ind = (1, 0, 0) v_arr = ((0, 0), (1, 0), (1, 0))\nchecking v_ind ="}︡{"stdout":" (1, 0, 0) v_arr = ((0, 0), (1, 0), (1, 1))\nchecking v_ind = (1, 0, 0) v_arr = ((0, 0), (1, 1), (0, 0))\nchecking v_ind = (1, 0, 0) v_arr = ((0, 0), (1, 1), (0, 1))\nchecking v_ind = (1, 0, 0) v_arr = ((0, 0), (1, 1), (1, 0))\nchecking v_ind = (1, 0, 0) v_arr = ((0, 0), (1, 1), (1, 1))\nchecking v_ind = (1, 0, 0) v_arr = ((0, 1), (0, 0), (0, 0))\nchecking v_ind = (1, 0, 0) v_arr = ((0, 1), (0, 0), (0, 1))\nchecking v_ind = (1, 0, 0) v_arr = ((0, 1), (0, 0), (1, 0))\nchecking v_ind = (1, 0, 0) v_arr = ((0, 1), (0, 0), (1, 1))\nchecking v_ind = (1, 0, 0) v_arr = ((0, 1), (0, 1), (0, 0))\nchecking v_ind = (1, 0, 0) v_arr = ((0, 1), (0, 1), (0, 1))\nchecking v_ind = (1, 0, 0) v_arr = ((0, 1), (0, 1), (1, 0))\nchecking v_ind = (1, 0, 0) v_arr = ((0, 1), (0, 1), (1, 1))\nchecking v_ind = (1, 0, 0) v_arr = ((0, 1), (1, 0), (0, 0))\nchecking v_ind = (1, 0, 0) v_arr = ((0, 1), (1, 0), (0, 1))\nchecking v_ind = (1, 0, 0) v_arr = ((0, 1), (1, 0), (1, 0))\nchecking v_ind = (1, 0, 0) v_arr = ((0, 1), (1, 0), (1, 1))\nchecking v_ind = (1, 0, 0) v_arr = ((0, 1), (1, 1), (0, 0))\nchecking v_ind = (1, 0, 0) v_arr = ((0, 1), (1, 1), (0, 1))\nchecking v_ind = (1, 0, 0) v_arr = ((0, 1), (1, 1), (1, 0))\nchecking v_ind = (1, 0, 0) v_arr = ((0, 1), (1, 1), (1, 1))\nchecking v_ind = (1, 0, 0) v_arr = ((1, 0), (0, 0), (0, 0))\nchecking v_ind = (1, 0, 0) v_arr = ((1, 0), (0, 0), (0, 1))\nchecking v_ind = (1, 0, 0) v_arr = ((1, 0), (0, 0), (1, 0))\nchecking v_ind = (1, 0, 0) v_arr = ((1, 0), (0, 0), (1, 1))\nchecking v_ind = (1, 0, 0) v_arr = ((1, 0), (0, 1), (0, 0))\nchecking v_ind = (1, 0, 0) v_arr = ((1, 0), (0, 1), (0, 1))\nchecking v_ind = (1, 0, 0) v_arr = ((1, 0), (0, 1), (1, 0))\nchecking v_ind = (1, 0, 0) v_arr = ((1, 0), (0, 1), (1, 1))\nchecking v_ind = (1, 0, 0) v_arr = ((1, 0), (1, 0), (0, 0))\nchecking v_ind = (1, 0, 0) v_arr = ((1, 0), (1, 0), (0, 1))\nchecking v_ind ="}︡{"stdout":" (1, 0, 0) v_arr = ((1, 0), (1, 0), (1, 0))\nchecking v_ind = (1, 0, 0) v_arr = ((1, 0), (1, 0), (1, 1))\nchecking v_ind = (1, 0, 0) v_arr = ((1, 0), (1, 1), (0, 0))\nchecking v_ind = (1, 0, 0) v_arr = ((1, 0), (1, 1), (0, 1))\nchecking v_ind = (1, 0, 0) v_arr = ((1, 0), (1, 1), (1, 0))\nchecking v_ind = (1, 0, 0) v_arr = ((1, 0), (1, 1), (1, 1))\nchecking v_ind = (1, 0, 0) v_arr = ((1, 1), (0, 0), (0, 0))\nchecking v_ind = (1, 0, 0) v_arr = ((1, 1), (0, 0), (0, 1))\nchecking v_ind = (1, 0, 0) v_arr = ((1, 1), (0, 0), (1, 0))\nchecking v_ind = (1, 0, 0) v_arr = ((1, 1), (0, 0), (1, 1))\nchecking v_ind = (1, 0, 0) v_arr = ((1, 1), (0, 1), (0, 0))\nchecking v_ind = (1, 0, 0) v_arr = ((1, 1), (0, 1), (0, 1))\nchecking v_ind = (1, 0, 0) v_arr = ((1, 1), (0, 1), (1, 0))\nchecking v_ind = (1, 0, 0) v_arr = ((1, 1), (0, 1), (1, 1))\nchecking v_ind = (1, 0, 0) v_arr = ((1, 1), (1, 0), (0, 0))\nchecking v_ind = (1, 0, 0) v_arr = ((1, 1), (1, 0), (0, 1))\nchecking v_ind = (1, 0, 0) v_arr = ((1, 1), (1, 0), (1, 0))\nchecking v_ind = (1, 0, 0) v_arr = ((1, 1), (1, 0), (1, 1))\nchecking v_ind = (1, 0, 0) v_arr = ((1, 1), (1, 1), (0, 0))\nchecking v_ind = (1, 0, 0) v_arr = ((1, 1), (1, 1), (0, 1))\nchecking v_ind = (1, 0, 0) v_arr = ((1, 1), (1, 1), (1, 0))\nchecking v_ind = (1, 0, 0) v_arr = ((1, 1), (1, 1), (1, 1))\nchecking v_ind = (1, 0, 1) v_arr = ((0, 0), (0, 0), (0, 0))\nchecking v_ind = (1, 0, 1) v_arr = ((0, 0), (0, 0), (0, 1))\nchecking v_ind = (1, 0, 1) v_arr = ((0, 0), (0, 0), (1, 0))\nchecking v_ind = (1, 0, 1) v_arr = ((0, 0), (0, 0), (1, 1))\nchecking v_ind = (1, 0, 1) v_arr = ((0, 0), (0, 1), (0, 0))\nchecking v_ind = (1, 0, 1) v_arr = ((0, 0), (0, 1), (0, 1))\nchecking v_ind = (1, 0, 1) v_arr = ((0, 0), (0, 1), (1, 0))\nchecking v_ind = (1, 0, 1) v_arr = ((0, 0), (0, 1), (1, 1))\nchecking v_ind = (1, 0, 1) v_arr = ((0, 0), (1, 0), (0, 0))\nchecking v_ind = (1, 0, 1) v_arr = ((0, 0), (1, 0), (0, 1))\nchecking v_ind = (1, 0, 1) v_arr = ((0, 0), (1, 0), (1, 0))\nchecking v_ind = (1, 0, 1) v_arr = ((0, 0), (1, 0), (1, 1))\nchecking v_ind ="}︡{"stdout":" (1, 0, 1) v_arr = ((0, 0), (1, 1), (0, 0))\nchecking v_ind = (1, 0, 1) v_arr = ((0, 0), (1, 1), (0, 1))\nchecking v_ind = (1, 0, 1) v_arr = ((0, 0), (1, 1), (1, 0))\nchecking v_ind = (1, 0, 1) v_arr = ((0, 0), (1, 1), (1, 1))\nchecking v_ind = (1, 0, 1) v_arr = ((0, 1), (0, 0), (0, 0))\nchecking v_ind = (1, 0, 1) v_arr = ((0, 1), (0, 0), (0, 1))\nchecking v_ind = (1, 0, 1) v_arr = ((0, 1), (0, 0), (1, 0))\nchecking v_ind = (1, 0, 1) v_arr = ((0, 1), (0, 0), (1, 1))\nchecking v_ind = (1, 0, 1) v_arr = ((0, 1), (0, 1), (0, 0))\nchecking v_ind = (1, 0, 1) v_arr = ((0, 1), (0, 1), (0, 1))\nchecking v_ind = (1, 0, 1) v_arr = ((0, 1), (0, 1), (1, 0))\nchecking v_ind = (1, 0, 1) v_arr = ((0, 1), (0, 1), (1, 1))\nchecking v_ind = (1, 0, 1) v_arr = ((0, 1), (1, 0), (0, 0))\nchecking v_ind = (1, 0, 1) v_arr = ((0, 1), (1, 0), (0, 1))\nchecking v_ind = (1, 0, 1) v_arr = ((0, 1), (1, 0), (1, 0))\nchecking v_ind = (1, 0, 1) v_arr = ((0, 1), (1, 0), (1, 1))\nchecking v_ind = (1, 0, 1) v_arr = ((0, 1), (1, 1), (0, 0))\nchecking v_ind = (1, 0, 1) v_arr = ((0, 1), (1, 1), (0, 1))\nchecking v_ind = (1, 0, 1) v_arr = ((0, 1), (1, 1), (1, 0))\nchecking v_ind = (1, 0, 1) v_arr = ((0, 1), (1, 1), (1, 1))\nchecking v_ind = (1, 0, 1) v_arr = ((1, 0), (0, 0), (0, 0))\nchecking v_ind = (1, 0, 1) v_arr = ((1, 0), (0, 0), (0, 1))\nchecking v_ind = (1, 0, 1) v_arr = ((1, 0), (0, 0), (1, 0))\nchecking v_ind = (1, 0, 1) v_arr = ((1, 0), (0, 0), (1, 1))\nchecking v_ind = (1, 0, 1) v_arr = ((1, 0), (0, 1), (0, 0))\nchecking v_ind = (1, 0, 1) v_arr = ((1, 0), (0, 1), (0, 1))\nchecking v_ind = (1, 0, 1) v_arr = ((1, 0), (0, 1), (1, 0))\nchecking v_ind = (1, 0, 1) v_arr = ((1, 0), (0, 1), (1, 1))\nchecking v_ind = (1, 0, 1) v_arr = ((1, 0), (1, 0), (0, 0))\nchecking v_ind = (1, 0, 1) v_arr = ((1, 0), (1, 0), (0, 1))\nchecking v_ind = (1, 0, 1) v_arr = ((1, 0), (1, 0), (1, 0))\nchecking v_ind = (1, 0, 1) v_arr = ((1, 0), (1, 0), (1, 1))\nchecking v_ind = (1, 0, 1) v_arr = ((1, 0), (1, 1), (0, 0))\nchecking v_ind = (1, 0, 1) v_arr = ((1, 0), (1, 1), (0, 1))\nchecking v_ind ="}︡{"stdout":" (1, 0, 1) v_arr = ((1, 0), (1, 1), (1, 0))\nchecking v_ind = (1, 0, 1) v_arr = ((1, 0), (1, 1), (1, 1))\nchecking v_ind = (1, 0, 1) v_arr = ((1, 1), (0, 0), (0, 0))\nchecking v_ind = (1, 0, 1) v_arr = ((1, 1), (0, 0), (0, 1))\nchecking v_ind = (1, 0, 1) v_arr = ((1, 1), (0, 0), (1, 0))\nchecking v_ind = (1, 0, 1) v_arr = ((1, 1), (0, 0), (1, 1))\nchecking v_ind = (1, 0, 1) v_arr = ((1, 1), (0, 1), (0, 0))\nchecking v_ind = (1, 0, 1) v_arr = ((1, 1), (0, 1), (0, 1))\nchecking v_ind = (1, 0, 1) v_arr = ((1, 1), (0, 1), (1, 0))\nchecking v_ind = (1, 0, 1) v_arr = ((1, 1), (0, 1), (1, 1))\nchecking v_ind = (1, 0, 1) v_arr = ((1, 1), (1, 0), (0, 0))\nchecking v_ind = (1, 0, 1) v_arr = ((1, 1), (1, 0), (0, 1))\nchecking v_ind = (1, 0, 1) v_arr = ((1, 1), (1, 0), (1, 0))\nchecking v_ind = (1, 0, 1) v_arr = ((1, 1), (1, 0), (1, 1))\nchecking v_ind = (1, 0, 1) v_arr = ((1, 1), (1, 1), (0, 0))\nchecking v_ind = (1, 0, 1) v_arr = ((1, 1), (1, 1), (0, 1))\nchecking v_ind = (1, 0, 1) v_arr = ((1, 1), (1, 1), (1, 0))\nchecking v_ind = (1, 0, 1) v_arr = ((1, 1), (1, 1), (1, 1))\nchecking v_ind = (1, 1, 0) v_arr = ((0, 0), (0, 0), (0, 0))\nchecking v_ind = (1, 1, 0) v_arr = ((0, 0), (0, 0), (0, 1))\nchecking v_ind = (1, 1, 0) v_arr = ((0, 0), (0, 0), (1, 0))\nchecking v_ind = (1, 1, 0) v_arr = ((0, 0), (0, 0), (1, 1))\nchecking v_ind = (1, 1, 0) v_arr = ((0, 0), (0, 1), (0, 0))\nchecking v_ind = (1, 1, 0) v_arr = ((0, 0), (0, 1), (0, 1))\nchecking v_ind = (1, 1, 0) v_arr = ((0, 0), (0, 1), (1, 0))\nchecking v_ind = (1, 1, 0) v_arr = ((0, 0), (0, 1), (1, 1))\nchecking v_ind = (1, 1, 0) v_arr = ((0, 0), (1, 0), (0, 0))\nchecking v_ind = (1, 1, 0) v_arr = ((0, 0), (1, 0), (0, 1))\nchecking v_ind = (1, 1, 0) v_arr = ((0, 0), (1, 0), (1, 0))\nchecking v_ind = (1, 1, 0) v_arr = ((0, 0), (1, 0), (1, 1))\nchecking v_ind = (1, 1, 0) v_arr = ((0, 0), (1, 1), (0, 0))\nchecking v_ind = (1, 1, 0) v_arr = ((0, 0), (1, 1), (0, 1))\nchecking v_ind ="}︡{"stdout":" (1, 1, 0) v_arr = ((0, 0), (1, 1), (1, 0))\nchecking v_ind = (1, 1, 0) v_arr = ((0, 0), (1, 1), (1, 1))\nchecking v_ind = (1, 1, 0) v_arr = ((0, 1), (0, 0), (0, 0))\nchecking v_ind = (1, 1, 0) v_arr = ((0, 1), (0, 0), (0, 1))\nchecking v_ind = (1, 1, 0) v_arr = ((0, 1), (0, 0), (1, 0))\nchecking v_ind = (1, 1, 0) v_arr = ((0, 1), (0, 0), (1, 1))\nchecking v_ind = (1, 1, 0) v_arr = ((0, 1), (0, 1), (0, 0))\nchecking v_ind = (1, 1, 0) v_arr = ((0, 1), (0, 1), (0, 1))\nchecking v_ind = (1, 1, 0) v_arr = ((0, 1), (0, 1), (1, 0))\nchecking v_ind = (1, 1, 0) v_arr = ((0, 1), (0, 1), (1, 1))\nchecking v_ind = (1, 1, 0) v_arr = ((0, 1), (1, 0), (0, 0))\nchecking v_ind = (1, 1, 0) v_arr = ((0, 1), (1, 0), (0, 1))\nchecking v_ind = (1, 1, 0) v_arr = ((0, 1), (1, 0), (1, 0))\nchecking v_ind = (1, 1, 0) v_arr = ((0, 1), (1, 0), (1, 1))\nchecking v_ind = (1, 1, 0) v_arr = ((0, 1), (1, 1), (0, 0))\nchecking v_ind = (1, 1, 0) v_arr = ((0, 1), (1, 1), (0, 1))\nchecking v_ind = (1, 1, 0) v_arr = ((0, 1), (1, 1), (1, 0))\nchecking v_ind = (1, 1, 0) v_arr = ((0, 1), (1, 1), (1, 1))\nchecking v_ind = (1, 1, 0) v_arr = ((1, 0), (0, 0), (0, 0))\nchecking v_ind = (1, 1, 0) v_arr = ((1, 0), (0, 0), (0, 1))\nchecking v_ind = (1, 1, 0) v_arr = ((1, 0), (0, 0), (1, 0))\nchecking v_ind = (1, 1, 0) v_arr = ((1, 0), (0, 0), (1, 1))\nchecking v_ind = (1, 1, 0) v_arr = ((1, 0), (0, 1), (0, 0))\nchecking v_ind = (1, 1, 0) v_arr = ((1, 0), (0, 1), (0, 1))\nchecking v_ind = (1, 1, 0) v_arr = ((1, 0), (0, 1), (1, 0))\nchecking v_ind = (1, 1, 0) v_arr = ((1, 0), (0, 1), (1, 1))\nchecking v_ind = (1, 1, 0) v_arr = ((1, 0), (1, 0), (0, 0))\nchecking v_ind = (1, 1, 0) v_arr = ((1, 0), (1, 0), (0, 1))\nchecking v_ind = (1, 1, 0) v_arr = ((1, 0), (1, 0), (1, 0))\nchecking v_ind = (1, 1, 0) v_arr = ((1, 0), (1, 0), (1, 1))\nchecking v_ind = (1, 1, 0) v_arr = ((1, 0), (1, 1), (0, 0))\nchecking v_ind = (1, 1, 0) v_arr = ((1, 0), (1, 1), (0, 1))\nchecking v_ind ="}︡{"stdout":" (1, 1, 0) v_arr = ((1, 0), (1, 1), (1, 0))\nchecking v_ind = (1, 1, 0) v_arr = ((1, 0), (1, 1), (1, 1))\nchecking v_ind = (1, 1, 0) v_arr = ((1, 1), (0, 0), (0, 0))\nchecking v_ind = (1, 1, 0) v_arr = ((1, 1), (0, 0), (0, 1))\nchecking v_ind = (1, 1, 0) v_arr = ((1, 1), (0, 0), (1, 0))\nchecking v_ind = (1, 1, 0) v_arr = ((1, 1), (0, 0), (1, 1))\nchecking v_ind = (1, 1, 0) v_arr = ((1, 1), (0, 1), (0, 0))\nchecking v_ind = (1, 1, 0) v_arr = ((1, 1), (0, 1), (0, 1))\nchecking v_ind = (1, 1, 0) v_arr = ((1, 1), (0, 1), (1, 0))\nchecking v_ind = (1, 1, 0) v_arr = ((1, 1), (0, 1), (1, 1))\nchecking v_ind = (1, 1, 0) v_arr = ((1, 1), (1, 0), (0, 0))\nchecking v_ind = (1, 1, 0) v_arr = ((1, 1), (1, 0), (0, 1))\nchecking v_ind = (1, 1, 0) v_arr = ((1, 1), (1, 0), (1, 0))\nchecking v_ind = (1, 1, 0) v_arr = ((1, 1), (1, 0), (1, 1))\nchecking v_ind = (1, 1, 0) v_arr = ((1, 1), (1, 1), (0, 0))\nchecking v_ind = (1, 1, 0) v_arr = ((1, 1), (1, 1), (0, 1))\nchecking v_ind = (1, 1, 0) v_arr = ((1, 1), (1, 1), (1, 0))\nchecking v_ind = (1, 1, 0) v_arr = ((1, 1), (1, 1), (1, 1))\nchecking v_ind = (1, 1, 1) v_arr = ((0, 0), (0, 0), (0, 0))\nchecking v_ind = (1, 1, 1) v_arr = ((0, 0), (0, 0), (0, 1))\nchecking v_ind = (1, 1, 1) v_arr = ((0, 0), (0, 0), (1, 0))\nchecking v_ind = (1, 1, 1) v_arr = ((0, 0), (0, 0), (1, 1))\nchecking v_ind = (1, 1, 1) v_arr = ((0, 0), (0, 1), (0, 0))\nchecking v_ind = (1, 1, 1) v_arr = ((0, 0), (0, 1), (0, 1))\nchecking v_ind = (1, 1, 1) v_arr = ((0, 0), (0, 1), (1, 0))\nchecking v_ind = (1, 1, 1) v_arr = ((0, 0), (0, 1), (1, 1))\nchecking v_ind = (1, 1, 1) v_arr = ((0, 0), (1, 0), (0, 0))\nchecking v_ind = (1, 1, 1) v_arr = ((0, 0), (1, 0), (0, 1))\nchecking v_ind = (1, 1, 1) v_arr = ((0, 0), (1, 0), (1, 0))\nchecking v_ind = (1, 1, 1) v_arr = ((0, 0), (1, 0), (1, 1))\nchecking v_ind = (1, 1, 1) v_arr = ((0, 0), (1, 1), (0, 0))\nchecking v_ind ="}︡{"stdout":" (1, 1, 1) v_arr = ((0, 0), (1, 1), (0, 1))\nchecking v_ind = (1, 1, 1) v_arr = ((0, 0), (1, 1), (1, 0))\nchecking v_ind = (1, 1, 1) v_arr = ((0, 0), (1, 1), (1, 1))\nchecking v_ind = (1, 1, 1) v_arr = ((0, 1), (0, 0), (0, 0))\nchecking v_ind = (1, 1, 1) v_arr = ((0, 1), (0, 0), (0, 1))\nchecking v_ind = (1, 1, 1) v_arr = ((0, 1), (0, 0), (1, 0))\nchecking v_ind = (1, 1, 1) v_arr = ((0, 1), (0, 0), (1, 1))\nchecking v_ind = (1, 1, 1) v_arr = ((0, 1), (0, 1), (0, 0))\nchecking v_ind = (1, 1, 1) v_arr = ((0, 1), (0, 1), (0, 1))\nchecking v_ind = (1, 1, 1) v_arr = ((0, 1), (0, 1), (1, 0))\nchecking v_ind = (1, 1, 1) v_arr = ((0, 1), (0, 1), (1, 1))\nchecking v_ind = (1, 1, 1) v_arr = ((0, 1), (1, 0), (0, 0))\nchecking v_ind = (1, 1, 1) v_arr = ((0, 1), (1, 0), (0, 1))\nchecking v_ind = (1, 1, 1) v_arr = ((0, 1), (1, 0), (1, 0))\nchecking v_ind = (1, 1, 1) v_arr = ((0, 1), (1, 0), (1, 1))\nchecking v_ind = (1, 1, 1) v_arr = ((0, 1), (1, 1), (0, 0))\nchecking v_ind = (1, 1, 1) v_arr = ((0, 1), (1, 1), (0, 1))\nchecking v_ind = (1, 1, 1) v_arr = ((0, 1), (1, 1), (1, 0))\nchecking v_ind = (1, 1, 1) v_arr = ((0, 1), (1, 1), (1, 1))\nchecking v_ind = (1, 1, 1) v_arr = ((1, 0), (0, 0), (0, 0))\nchecking v_ind = (1, 1, 1) v_arr = ((1, 0), (0, 0), (0, 1))\nchecking v_ind = (1, 1, 1) v_arr = ((1, 0), (0, 0), (1, 0))\nchecking v_ind = (1, 1, 1) v_arr = ((1, 0), (0, 0), (1, 1))\nchecking v_ind = (1, 1, 1) v_arr = ((1, 0), (0, 1), (0, 0))\nchecking v_ind = (1, 1, 1) v_arr = ((1, 0), (0, 1), (0, 1))\nchecking v_ind = (1, 1, 1) v_arr = ((1, 0), (0, 1), (1, 0))\nchecking v_ind = (1, 1, 1) v_arr = ((1, 0), (0, 1), (1, 1))\nchecking v_ind = (1, 1, 1) v_arr = ((1, 0), (1, 0), (0, 0))\nchecking v_ind = (1, 1, 1) v_arr = ((1, 0), (1, 0), (0, 1))\nchecking v_ind = (1, 1, 1) v_arr = ((1, 0), (1, 0), (1, 0))\nchecking v_ind = (1, 1, 1) v_arr = ((1, 0), (1, 0), (1, 1))\nchecking v_ind = (1, 1, 1) v_arr = ((1, 0), (1, 1), (0, 0))\nchecking v_ind = (1, 1, 1) v_arr = ((1, 0), (1, 1), (0, 1))\nchecking v_ind = (1, 1, 1) v_arr = ((1, 0), (1, 1), (1, 0))\nchecking v_ind ="}︡{"stdout":" (1, 1, 1) v_arr = ((1, 0), (1, 1), (1, 1))\nchecking v_ind = (1, 1, 1) v_arr = ((1, 1), (0, 0), (0, 0))\nchecking v_ind = (1, 1, 1) v_arr = ((1, 1), (0, 0), (0, 1))\nchecking v_ind = (1, 1, 1) v_arr = ((1, 1), (0, 0), (1, 0))\nchecking v_ind = (1, 1, 1) v_arr = ((1, 1), (0, 0), (1, 1))\nchecking v_ind = (1, 1, 1) v_arr = ((1, 1), (0, 1), (0, 0))\nchecking v_ind = (1, 1, 1) v_arr = ((1, 1), (0, 1), (0, 1))\nchecking v_ind = (1, 1, 1) v_arr = ((1, 1), (0, 1), (1, 0))\nchecking v_ind = (1, 1, 1) v_arr = ((1, 1), (0, 1), (1, 1))\nchecking v_ind = (1, 1, 1) v_arr = ((1, 1), (1, 0), (0, 0))\nchecking v_ind = (1, 1, 1) v_arr = ((1, 1), (1, 0), (0, 1))\nchecking v_ind = (1, 1, 1) v_arr = ((1, 1), (1, 0), (1, 0))\nchecking v_ind = (1, 1, 1) v_arr = ((1, 1), (1, 0), (1, 1))\nchecking v_ind = (1, 1, 1) v_arr = ((1, 1), (1, 1), (0, 0))\nchecking v_ind = (1, 1, 1) v_arr = ((1, 1), (1, 1), (0, 1))\nchecking v_ind = (1, 1, 1) v_arr = ((1, 1), (1, 1), (1, 0))\nchecking v_ind = (1, 1, 1) v_arr = ((1, 1), (1, 1), (1, 1))\nG ="}︡{"stdout":" Multi-graph on 1024 vertices\n"}︡
︠81c75631-c8b5-42e4-aa08-f4d68c56274cr︠
    
p = MixedIntegerLinearProgram()
v = p.new_variable(real=True, nonnegative=True)
x, y, z = v['x'], v['y'], v['z']
type(2*x <= 0)
︡4685b240-6330-4b56-b3a5-7b158517c792︡{"stdout":"2*x_0 <= 0\n"}
︠7dcf55ec-c018-4009-8544-a64ce0b7afd1︠










